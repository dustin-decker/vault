// ServiceAccount for IAM perms via Workload Identity
// Used for
// - Cloud SQL Proxy
// - GCP Rolesets 
//
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault

// Deployment of Vault Active-Active replicas
apiVersion: apps/v1
kind: Deployment
metadata:
  name: vault
  namespace: vault
  labels:
    app: vault
spec:
  serviceName: vault
  selector:
    matchLabels:
      app: vault
  template:
    metadata:
      labels:
        app: vault
    spec:
      replicas: 3
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: vault
                  component: server
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 10
      serviceAccountName: vault
      securityContext:
        runAsNonRoot: true
        runAsGroup: 1000
        runAsUser: 100
        fsGroup: 1000
      volumes:
        - name: config
          configMap:
            name: vault
      containers:
        // CloudSQL proxy
        - name: cloudsql-proxy
          image: gcr.io/cloudsql-docker/gce-proxy:1.16
          command: ["/cloud_sql_proxy",
                      "-instances={{ .Values.cloud_sql_instance_name}}=tcp:3306",
                      # If running on a VPC, the Cloud SQL proxy can connect via Private IP. See:
                      # https://cloud.google.com/sql/docs/mysql/private-ip for more info.
                      "-ip_address_types=PRIVATE",
                      "-credential_file=/secrets/cloudsql/credentials.json"]
          securityContext:
              runAsUser: 2
              allowPrivilegeEscalation: false

        // Vault Guard
        - name: vault-guard
          securityContext:
            allowPrivilegeEscalation: false
          image: {{ .Values.images.vault_guard }}
          imagePullPolicy: IfNotPresent
          command: ["/vault-guard"]
          env:
            - name: A
              value: B
          ports:
            - containerPort: 8443
              name: http


        // Vault
        - name: vault
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: ["IPC_LOCK"]
          image: {{ .Values.images.vault }}
          imagePullPolicy: IfNotPresent
          command: 
          - "/bin/sh"
          - "-ec"
          args: 
          - |
            sed -E "s/HOST_IP/${HOST_IP?}/g" /vault/config/extraconfig-from-values.hcl > /tmp/storageconfig.hcl;
            sed -Ei "s/POD_IP/${POD_IP?}/g" /tmp/storageconfig.hcl;
            /usr/local/bin/docker-entrypoint.sh vault server -config=/tmp/storageconfig.hcl 
          env:
            - name: VAULT_ADDR
              value: "http://127.0.0.1:8200"
            - name: VAULT_API_ADDR
              value: "http://$(POD_IP):8200"
            - name: SKIP_CHOWN
              value: "true"
            - name: SKIP_SETCAP
              value: "true"
          volumeMounts:
            - name: config
              mountPath: /vault/config
          ports:
            - containerPort: 8200
              name: http
          readinessProbe:
            # Check status; unsealed vault servers return 0
            # The exit code reflects the seal status:
            #   0 - unsealed
            #   1 - error
            #   2 - sealed
            exec:
              command: ["/bin/sh", "-ec", "vault status -tls-skip-verify"]
            failureThreshold: 2
            initialDelaySeconds: 5
            periodSeconds: 3
            successThreshold: 1
            timeoutSeconds: 5
          lifecycle:
            # Vault container doesn't receive SIGTERM from Kubernetes
            # and after the grace period ends, Kube sends SIGKILL.
            preStop:
              exec:
                command: [
                  "/bin/sh", "-c",
                  # Adding a sleep here to give the pod eviction a
                  # chance to propagate, so requests will not be made
                  # to this pod while it's terminating
                  "sleep 15 && kill -SIGTERM $(pidof vault)",
                ]

// Service for exposing Vault Guard port on the nodes for load balancing
apiVersion: v1
kind: Service
metadata:
  name: vault
  namespace: vault
spec:
  type: NodePort
  selector:
    app: vault
  ports:
    - nodePort: 8443
      port: 8443 
      targetPort: 8443

// CronJob for running lease tidy API
